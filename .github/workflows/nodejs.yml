# Github Actions help: https://help.github.com/en/actions
# Expressions and context: https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
# Creating a workflow: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow
# Using variables and secrets: https://help.github.com/en/actions/configuring-and-managing-workflows/using-variables-and-secrets-in-a-workflow

name: Userprofile CI/CD

env:
  working_directory: apis/userprofile
  repo: devopsoh/api-userprofile
  acr: openhackq811qdi1acr.azurecr.io
  appname: openhackq811qdi1userprofile
  staging-slot: staging
  staging-url: https://openhackq811qdi1userprofile-staging.azurewebsites.net
  prod-slot: production
  resource-group: openhackq811qdi1rg
    
on:
  push:
    branches: 
    - master
    paths:
    - 'apis/userprofile/**'

  pull_request:
    branches: 
    - 'master'
    paths: 
    - 'apis/userprofile/**'

jobs:     
  test:
    defaults:
      run:
        working-directory: ${{ env.working_directory }}

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [10.x, 12.x]

    name: build validation
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm CI, Build and Test
      run: |
        npm ci
        npm run build --if-present
        npm test
  
  build:
    name: docker build & push to acr
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - name: docker build and push
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.repo }}
        registry: ${{ env.acr }}
        dockerfile: ${{ env.working_directory }}/Dockerfile
        path: ${{ env.working_directory }}
        tags: ${{ github.run_number }}
  
  deploy:
    name: deploy to staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: "Login via Azure CLI"
        uses: azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.appname }}"
          images: "${{ env.acr }}/${{ env.repo }}:${{ github.run_number }}"
          slot-name: ${{ env.staging-slot }}
          
  check-staging:
    name: check staging environment
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: deploy
    continue-on-error: true
    steps:
      - name: URL Health Check
        uses: Jtalk/url-health-check-action@v1.3
        with:
          url: ${{ env.staging-url }}/api/healthcheck/user
          max-attempts: 2
          retry-delay: 5s
  
  swap-slots:
    name: swap staging and production slots
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: check-staging
    steps:
      - uses: actions/checkout@v2
      - name: "Login via Azure CLI"
        uses: azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure CLI Action
        uses: Azure/cli@v1.0.0
        with:
          # https://docs.microsoft.com/en-us/cli/azure/webapp/deployment/slot?view=azure-cli-latest#az-webapp-deployment-slot-swap
          inlineScript: az webapp deployment slot swap -g ${{ env.resource-group }} -n ${{ env.appname }} --slot staging --target-slot production

